**MY ANSIBLE PLAYBOOK**
---
    - name: deploy apache2 on host server[remote]
      hosts: all
      become: true
      become_user: root 
      vars_files:
        - vars/config.yaml
    
      tasks:
        - name: Update "apt" repository
          apt:
            update_cache: true
            autoclean: true
            autoremove: true
    
        - name: Install (git, apache2 unzip, curl)
          apt:
            pkg:
            - git
            - apache2
            - unzip
            - curl
            - ufw
    
        - name: Install Software properties
          command: apt install -y software-properties-common
    
        - name: Add Apt Repo for PHP
          command: add-apt-repository ppa:ondrej/php -y
      
        - name: Update "apt"
          apt:
            update_cache: true
            autoclean: true 
      
        - name: Install PHP
          command: apt install --no-install-recommends php8.1 -y
    
        - name: Update "apt"
          apt:
            update_cache: true
            autoclean: true
    
        - name: Install PHP 8.1 and it's libraries
          apt:
            pkg:
            - libapache2-mod-php
            - php8.1-common
            - php8.1-mysql
            - php8.1-xml
            - php8.1-xmlrpc
            - php8.1-curl
            - php8.1-gd
            - php8.1-imagick
            - php8.1-cli
            - php8.1-dev
            - php8.1-imap
            - php8.1-mbstring
            - php8.1-opcache
            - php8.1-soap
            - php8.1-zip
            - php8.1-intl
    
        - name: Update "apt"
          apt:
            update_cache: true
            autoclean: true        
       
        - name: "UFW - Allow HTTP on port {{ http_port }}"
          ufw:
            rule: allow
            port: "{{ http_port }}"
            proto: tcp
    
        - name: "UFW - Allow HTTPS on port {{ https_port }}"
          ufw:
            rule: allow
            port: "{{ https_port }}"
            proto: tcp
          
        - name: "UFW - Allow SSH on port {{ ssh_port }}"
          ufw:
            rule: allow
            port: "{{ ssh_port }}"
            proto: tcp
    
        - name: "UFW - Allow MySQL on port {{ mysql_port }}"
          ufw:
            rule: allow
            port: "{{ mysql_port }}"
            proto: tcp
       
        - name: Change the working directory to /var/www/ and create exam-project directory
          command: mkdir exam-project
          args:
            chdir: /var/www/
            creates: exam-project
        
        - name: Clone the project repo into a new directory
          git:
            repo: https://github.com/f1amy/laravel-realworld-example-app.git
            dest: /var/www/exam-project
            clone: true
            update: false
    
        - name: Create the web.php file in the routes directory
          ansible.builtin.copy:
            dest: /var/www/exam-project/routes/web.php
            content: |
              <?php
    
              Route::get('/', function () {
                  return view('welcome');
              });
    
        - name: Create the .env file
          ansible.builtin.copy:
            dest: /var/www/exam-project/.env
            content: |
              APP_NAME="Laravel Realworld Example App"
              APP_ENV=local
              APP_KEY=base64:DTqEegpW//PWREzfoZdnSkoUkFx6zaXLrotqrcEbZ90=
              APP_DEBUG=true
              APP_URL=178.62.107.41
              APP_PORT=3000
    
              LOG_CHANNEL=stack
              LOG_DEPRECATIONS_CHANNEL=null
              LOG_LEVEL=debug
    
              DB_CONNECTION=mysql
              DB_HOST=127.0.0.1
              DB_PORT=3306
              DB_DATABASE=tosindb
              DB_USERNAME=tosin
              DB_PASSWORD=1234
    
              BROADCAST_DRIVER=log
              CACHE_DRIVER=file
              FILESYSTEM_DISK=local
              QUEUE_CONNECTION=sync
              SESSION_DRIVER=file
              SESSION_LIFETIME=120
    
              MEMCACHED_HOST=127.0.0.1
    
              REDIS_HOST=127.0.0.1
              REDIS_PASSWORD=null
              REDIS_PORT=6379
    
              MAIL_MAILER=smtp
              MAIL_HOST=mailhog
              MAIL_PORT=1025
              MAIL_USERNAME=null
              MAIL_PASSWORD=null
              MAIL_ENCRYPTION=null
              MAIL_FROM_ADDRESS="hello@example.com"
              MAIL_FROM_NAME="${APP_NAME}"
    
              AWS_ACCESS_KEY_ID=
              AWS_SECRET_ACCESS_KEY=
              AWS_DEFAULT_REGION=us-east-1
              AWS_BUCKET=
              AWS_USE_PATH_STYLE_ENDPOINT=false
    
              PUSHER_APP_ID=
              PUSHER_APP_KEY=
              PUSHER_APP_SECRET=
              PUSHER_APP_CLUSTER=mt1
    
              MIX_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
              MIX_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"
    
              L5_SWAGGER_GENERATE_ALWAYS=true
              SAIL_XDEBUG_MODE=develop,debug
              SAIL_SKIP_CHECKS=true
    
        - name: Change the project directory and install Composer
          ansible.builtin.shell: curl -sS https://getcomposer.org/installer | php
          args:
            chdir: /var/www/exam-project
        
        - name: Move the downloaded composer binary to the system path
          ansible.builtin.command: mv composer.phar /usr/local/bin/composer
          args:
            chdir: /var/www/exam-project
            
        - name: Make composer executable by user
          ansible.builtin.file:
            path: /usr/local/bin/composer
            mode: '755'
    
        - name: Install Composer
          ansible.builtin.shell: composer install --no-interaction
          args:
            chdir: /var/www/exam-project
          
        - name: Run the php artisan key:generate command 
          ansible.builtin.shell: php artisan key:generate
          args:
            chdir: /var/www/exam-project
    
        - name: Run the php artisan config:cache command 
          ansible.builtin.shell: php artisan config:cache
          args:
            chdir: /var/www/exam-project
    
        - name: Run the php artisan migrate:fresh command 
          ansible.builtin.shell: php artisan migrate:fresh
          args:
            chdir: /var/www/exam-project
    
        - name: Run the php artisan migrate --seed command 
          ansible.builtin.shell: php artisan migrate --seed
          args:
            chdir: /var/www/exam-project 
  
        - name: Create an apache virtual host configuration file
          ansible.builtin.copy:
            dest: /etc/apache2/sites-available/exam.conf
            content: |
              <VirtualHost *:80>
                  ServerAdmin admin@adeshiletosin.live
                  ServerName adeshiletosin.live
                  ServerAlias www.adeshiletosin.live
                  DocumentRoot /var/www/exam-project/public
        
                  <Directory /var/www/exam-project/public>
                      AllowOverride All
                  </Directory>
        
                  ErrorLog ${APACHE_LOG_DIR}/error.log
                  CustomLog ${APACHE_LOG_DIR}/access.log combined
              </VirtualHost>
    
        - name: Enable a2enmod rewrite
          ansible.builtin.command: a2enmod rewrite
    
        - name: Disable default apache page and enable laravel page
          ansible.builtin.command: a2dissite 000-default.conf
    
        - name: Enable laravel page
          ansible.builtin.command: a2ensite exam.conf
    
        - name: Change file ownership, group and permissions
          ansible.builtin.file:
            path: /var/www/exam-project
            state: directory
            recurse: true
            owner: www-data
            group: www-data
            mode: '775'
    
        - name: Restart apache web server
          ansible.builtin.command: systemctl restart apache2
    
        - name: set timezone to Africa/Lagos
          timezone:
            name: Africa/Lagos
    
        - name: Script to install PostgreSQL
          ansible.builtin.script: name.sh
          args:
            chdir: /home
    
        - name: Installing snapd
          apt:
            name: snapd
    
        - name: Installing Core
          community.general.snap:
            name: core
    
        - name: Refreshing Core
          command: snap refresh core
    
        - name: Installing certbot
          community.general.snap:
            name: certbot
            classic: true
    
        - name: Configuring certbot
          shell: sudo ln -s /snap/bin/certbot /usr/bin/certbot
          args:
            chdir: /usr/bin/
            creates: certbot
    
        - name: Requesting SSL Certificate
          shell: sudo certbot --apache --agree-tos --redirect -m mailto:adeshiletosin111@gmail.com -d adeshiletosin.live --non-interactive -d www.adeshiletosin.live
